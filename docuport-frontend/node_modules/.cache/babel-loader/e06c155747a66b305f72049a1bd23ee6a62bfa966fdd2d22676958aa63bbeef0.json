{"ast":null,"code":"var _jsxFileName = \"D:\\\\Web\\\\docuport-git\\\\docuport-frontend\\\\src\\\\pages\\\\Upload.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from '../api/axiosInstance';\nimport './Upload.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Upload() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploadSuccess, setUploadSuccess] = useState(false);\n  const navigate = useNavigate();\n  const userId = localStorage.getItem('user_id'); // ✅ Use stored ID\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!file || !userId) {\n      alert(\"Please select a file and make sure you're logged in.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append('file', file);\n    formData.append('user_id', userId);\n    try {\n      console.log('CSRF Token (cookie):', document.cookie); // ✅ Debug line\n      await axios.post('/upload/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      alert('Upload successful');\n      setUploadSuccess(true);\n    } catch (err) {\n      console.error('Upload error:', err); // ✅ Debugging\n      alert('Upload failed');\n    }\n  };\n  const goToDashboard = () => {\n    navigate('/dashboard');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"upload-title\",\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      className: \"upload-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        className: \"upload-input\",\n        onChange: e => setFile(e.target.files[0])\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"upload-button\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), uploadSuccess && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-success\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: goToDashboard,\n        className: \"dashboard-button\",\n        children: \"Go to Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(Upload, \"hT7RSMkHZENk3ueTJJATjDGLvX8=\", false, function () {\n  return [useNavigate];\n});\n_c = Upload;\nvar _c;\n$RefreshReg$(_c, \"Upload\");","map":{"version":3,"names":["useState","useNavigate","axios","jsxDEV","_jsxDEV","Upload","_s","file","setFile","uploadSuccess","setUploadSuccess","navigate","userId","localStorage","getItem","handleSubmit","e","preventDefault","alert","formData","FormData","append","console","log","document","cookie","post","headers","err","error","goToDashboard","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","target","files","onClick","_c","$RefreshReg$"],"sources":["D:/Web/docuport-git/docuport-frontend/src/pages/Upload.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from '../api/axiosInstance';\r\nimport './Upload.css';\r\n\r\nexport default function Upload() {\r\n  const [file, setFile] = useState(null);\r\n  const [uploadSuccess, setUploadSuccess] = useState(false);\r\n  const navigate = useNavigate();\r\n  const userId = localStorage.getItem('user_id'); // ✅ Use stored ID\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!file || !userId) {\r\n      alert(\"Please select a file and make sure you're logged in.\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    formData.append('user_id', userId);\r\n\r\n    try {\r\n      console.log('CSRF Token (cookie):', document.cookie); // ✅ Debug line\r\n      await axios.post('/upload/', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      alert('Upload successful');\r\n      setUploadSuccess(true);\r\n    } catch (err) {\r\n      console.error('Upload error:', err); // ✅ Debugging\r\n      alert('Upload failed');\r\n    }\r\n  };\r\n\r\n  const goToDashboard = () => {\r\n    navigate('/dashboard');\r\n  };\r\n\r\n  return (\r\n    <div className=\"upload-container\">\r\n      <h1 className=\"upload-title\">Upload File</h1>\r\n      <form onSubmit={handleSubmit} className=\"upload-form\">\r\n        <input\r\n          type=\"file\"\r\n          className=\"upload-input\"\r\n          onChange={(e) => setFile(e.target.files[0])}\r\n        />\r\n        <button type=\"submit\" className=\"upload-button\">\r\n          Upload\r\n        </button>\r\n      </form>\r\n\r\n      {uploadSuccess && (\r\n        <div className=\"upload-success\">\r\n          <button onClick={goToDashboard} className=\"dashboard-button\">\r\n            Go to Dashboard\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}