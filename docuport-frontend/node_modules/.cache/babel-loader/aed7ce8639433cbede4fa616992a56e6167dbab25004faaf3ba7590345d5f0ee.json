{"ast":null,"code":"// src/api/axiosInstance.js\nimport axios from 'axios';\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8000',\n  // your Django backend\n  withCredentials: true,\n  // send cookies for session-based login\n  headers: {\n    'Content-Type': 'application/json',\n    'X-Requested-With': 'XMLHttpRequest'\n  }\n});\nexport default axiosInstance;\nconst handleLogin = async e => {\n  e.preventDefault();\n  try {\n    const res = await axiosInstance.post('/login/', {\n      email,\n      password\n    });\n    alert('Login successful');\n    onLogin(res.data.user_id); // Call the login handler\n    navigate('/dashboard'); // Redirect after login\n  } catch (err) {\n    alert('Login failed');\n  }\n};\n\n// // src/api/axiosInstance.js\n// import axios from 'axios';\n\n// // Helper function to get CSRF token from cookies\n// function getCookie(name) {\n//   let cookieValue = null;\n//   if (document.cookie && document.cookie !== '') {\n//     const cookies = document.cookie.split(';');\n//     for (let i = 0; i < cookies.length; i++) {\n//       const cookie = cookies[i].trim();\n//       // Check if this cookie string begins with the name we want\n//       if (cookie.substring(0, name.length + 1) === (name + '=')) {\n//         cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n//         break;\n//       }\n//     }\n//   }\n//   return cookieValue;\n// }\n\n// // Create axios instance\n// const axiosInstance = axios.create({\n//   baseURL: 'http://localhost:8000', // your Django backend\n//   withCredentials: true,            // send cookies for session-based login\n//   headers: {\n//     'Content-Type': 'application/json',\n//     'X-Requested-With': 'XMLHttpRequest',\n//   }\n// });\n\n// // Add CSRF token to every request if available\n// axiosInstance.interceptors.request.use(\n//   (config) => {\n//     const csrftoken = getCookie('csrftoken');\n//     if (csrftoken) {\n//       config.headers['X-CSRFToken'] = csrftoken;\n//     }\n//     return config;\n//   },\n//   (error) => Promise.reject(error)\n// );\n\n// export default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","withCredentials","headers","handleLogin","e","preventDefault","res","post","email","password","alert","onLogin","data","user_id","navigate","err"],"sources":["D:/Web/docuport-git/docuport-frontend/src/api/axiosInstance.js"],"sourcesContent":["// src/api/axiosInstance.js\r\nimport axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://localhost:8000', // your Django backend\r\n  withCredentials: true,            // send cookies for session-based login\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'X-Requested-With': 'XMLHttpRequest',\r\n  }\r\n});\r\n\r\nexport default axiosInstance;\r\n\r\n\r\nconst handleLogin = async (e) => {\r\n  e.preventDefault();\r\n  try {\r\n    const res = await axiosInstance.post('/login/', { email, password });\r\n    alert('Login successful');\r\n    onLogin(res.data.user_id);  // Call the login handler\r\n    navigate('/dashboard');     // Redirect after login\r\n  } catch (err) {\r\n    alert('Login failed');\r\n  }\r\n};\r\n\r\n// // src/api/axiosInstance.js\r\n// import axios from 'axios';\r\n\r\n// // Helper function to get CSRF token from cookies\r\n// function getCookie(name) {\r\n//   let cookieValue = null;\r\n//   if (document.cookie && document.cookie !== '') {\r\n//     const cookies = document.cookie.split(';');\r\n//     for (let i = 0; i < cookies.length; i++) {\r\n//       const cookie = cookies[i].trim();\r\n//       // Check if this cookie string begins with the name we want\r\n//       if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n//         cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n//         break;\r\n//       }\r\n//     }\r\n//   }\r\n//   return cookieValue;\r\n// }\r\n\r\n// // Create axios instance\r\n// const axiosInstance = axios.create({\r\n//   baseURL: 'http://localhost:8000', // your Django backend\r\n//   withCredentials: true,            // send cookies for session-based login\r\n//   headers: {\r\n//     'Content-Type': 'application/json',\r\n//     'X-Requested-With': 'XMLHttpRequest',\r\n//   }\r\n// });\r\n\r\n// // Add CSRF token to every request if available\r\n// axiosInstance.interceptors.request.use(\r\n//   (config) => {\r\n//     const csrftoken = getCookie('csrftoken');\r\n//     if (csrftoken) {\r\n//       config.headers['X-CSRFToken'] = csrftoken;\r\n//     }\r\n//     return config;\r\n//   },\r\n//   (error) => Promise.reject(error)\r\n// );\r\n\r\n// export default axiosInstance;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,eAAe,EAAE,IAAI;EAAa;EAClCC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,kBAAkB,EAAE;EACtB;AACF,CAAC,CAAC;AAEF,eAAeJ,aAAa;AAG5B,MAAMK,WAAW,GAAG,MAAOC,CAAC,IAAK;EAC/BA,CAAC,CAACC,cAAc,CAAC,CAAC;EAClB,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMR,aAAa,CAACS,IAAI,CAAC,SAAS,EAAE;MAAEC,KAAK;MAAEC;IAAS,CAAC,CAAC;IACpEC,KAAK,CAAC,kBAAkB,CAAC;IACzBC,OAAO,CAACL,GAAG,CAACM,IAAI,CAACC,OAAO,CAAC,CAAC,CAAE;IAC5BC,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAK;EAC9B,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZL,KAAK,CAAC,cAAc,CAAC;EACvB;AACF,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}