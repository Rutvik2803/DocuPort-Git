{"ast":null,"code":"import axios from 'axios';\n\n// Helper function to get CSRF token from cookies\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      // Check if this cookie string begins with the name we want\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\n// Create axios instance\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:8000',\n  // your Django backend\n  withCredentials: true,\n  // send cookies for session-based login\n  headers: {\n    'X-Requested-With': 'XMLHttpRequest'\n  }\n});\n\n// Add CSRF token to every request if available\naxiosInstance.interceptors.request.use(config => {\n  const csrftoken = getCookie('csrftoken');\n  if (csrftoken) {\n    config.headers['X-CSRFToken'] = csrftoken;\n  }\n  return config;\n}, error => Promise.reject(error));\nexport default axiosInstance;","map":{"version":3,"names":["axios","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","axiosInstance","create","baseURL","withCredentials","headers","interceptors","request","use","config","csrftoken","error","Promise","reject"],"sources":["D:/Web/docuport-git/docuport-frontend/src/api/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Helper function to get CSRF token from cookies\r\nfunction getCookie(name) {\r\n  let cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n    const cookies = document.cookie.split(';');\r\n    for (let i = 0; i < cookies.length; i++) {\r\n      const cookie = cookies[i].trim();\r\n      // Check if this cookie string begins with the name we want\r\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  return cookieValue;\r\n}\r\n\r\n// Create axios instance\r\nconst axiosInstance = axios.create({\r\n  baseURL: 'http://localhost:8000', // your Django backend\r\n  withCredentials: true,            // send cookies for session-based login\r\n  headers: {\r\n    'X-Requested-With': 'XMLHttpRequest',\r\n  }\r\n});\r\n\r\n// Add CSRF token to every request if available\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    const csrftoken = getCookie('csrftoken');\r\n    if (csrftoken) {\r\n      config.headers['X-CSRFToken'] = csrftoken;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,SAASC,SAASA,CAACC,IAAI,EAAE;EACvB,IAAIC,WAAW,GAAG,IAAI;EACtB,IAAIC,QAAQ,CAACC,MAAM,IAAID,QAAQ,CAACC,MAAM,KAAK,EAAE,EAAE;IAC7C,MAAMC,OAAO,GAAGF,QAAQ,CAACC,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC;IAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,OAAO,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;MACvC,MAAMH,MAAM,GAAGC,OAAO,CAACE,CAAC,CAAC,CAACE,IAAI,CAAC,CAAC;MAChC;MACA,IAAIL,MAAM,CAACM,SAAS,CAAC,CAAC,EAAET,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,KAAMP,IAAI,GAAG,GAAI,EAAE;QACzDC,WAAW,GAAGS,kBAAkB,CAACP,MAAM,CAACM,SAAS,CAACT,IAAI,CAACO,MAAM,GAAG,CAAC,CAAC,CAAC;QACnE;MACF;IACF;EACF;EACA,OAAON,WAAW;AACpB;;AAEA;AACA,MAAMU,aAAa,GAAGb,KAAK,CAACc,MAAM,CAAC;EACjCC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,eAAe,EAAE,IAAI;EAAa;EAClCC,OAAO,EAAE;IACP,kBAAkB,EAAE;EACtB;AACF,CAAC,CAAC;;AAEF;AACAJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,MAAMC,SAAS,GAAGrB,SAAS,CAAC,WAAW,CAAC;EACxC,IAAIqB,SAAS,EAAE;IACbD,MAAM,CAACJ,OAAO,CAAC,aAAa,CAAC,GAAGK,SAAS;EAC3C;EACA,OAAOD,MAAM;AACf,CAAC,EACAE,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;AAED,eAAeV,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}